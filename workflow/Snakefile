import os
import json
from snakemake.utils import min_version
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

min_version("6.6.1")

configfile: 
    "config/config.yaml"

with open("config/samples.tsv") as sample_file:
    h = sample_file.readline().rstrip('\n').split('\t')
    exp_ind = h.index("Experiment")
    rep_ind = h.index("Replicate")
    mod_ind = h.index("Modality")
    gen_ind = h.index("Genome")
    sample_config = {}
    samples = []
    for line in sample_file:
        if line.startswith("#"):
            continue
        entries = line.rstrip('\n').split('\t')
        exp = entries[exp_ind]
        rep = int(entries[rep_ind])
        mod = entries[mod_ind]
        gen = entries[gen_ind]
        sample_id = f"{exp}-{rep}"
        sample_config[sample_id] = {
            "experiment": exp,
            "replicate": rep,
            "modality": mod,
            "genome": gen
        }
        samples.append(sample_id)

workdir: 
    config['workdir']

envvars:
    "DCC_API_KEY",
    "DCC_SECRET_KEY"

HTTP = HTTPRemoteProvider()

max_threads = config["max_threads_per_rule"]

def script_path(script_name):
    return str(workflow.source_path(script_name))

include:
    "rules/fastqs.smk"
include:
    "rules/mapping.smk"
include:
    "rules/filtering.smk"
include:
    "rules/fragments.smk"
include:
    "rules/analyses.smk"
include:
    "rules/submit.smk"

localrules: 
    all, 
    submit, 
    query_portal,
    fetch_whitelist,
    fetch_index,
    idx_prefix_placeholder

rule all:
    """
    Generate all outputs (default)
    """
    input: 
        expand("results/{sample}/fastqs/fastqs.done", sample=samples),
        expand("results/{sample}/mapping/mapping.done", sample=samples),
        expand("results/{sample}/filtering/filtering.done", sample=samples),
        expand("results/{sample}/fragments/fragments.done", sample=samples),
        expand("results/{sample}/analyses/analyses.done", sample=samples)

rule submit:
    """
    Submit outputs to ENCODE portal
    """
    input: 
        expand("results/{sample}/submit/submit.done", sample=samples)

checkpoint query_portal:
    """
    Query ENCODE portal by experiment accession and replicate
    """
    output:
        "results/{sample}/input_data.json"
    params:
        experiment = lambda w: sample_config[w.sample]["experiment"],
        replicate = lambda w: sample_config[w.sample]["replicate"],
        modality = lambda w: sample_config[w.sample]["modality"],
        assembly = lambda w: sample_config[w.sample]["genome"],
        dcc_api_key = os.environ["DCC_API_KEY"], 
        dcc_secret_key = os.environ["DCC_SECRET_KEY"]
    log:
        directory("logs/{sample}/query")
    conda:
        "envs/portal.yaml"
    script:
        "scripts/encode_query.py"

class SampleDataFetcher:
    """
    Data structure for caching queried input data
    """
    def __init__(self, rule):
        self.rule = rule
        self.cache = {}

    def __getitem__(self, sample):
        if sample in self.cache:
            return self.cache[sample]
        with self.rule.get(sample=sample).output[0].open() as f:
            data = json.load(f)
        self.cache[sample] = data
        return data

sample_data = SampleDataFetcher(checkpoints.query_portal) 

rule fetch_whitelist:
    """
    Fetch barcode whitelist
    """
    input:
        lambda w: HTTP.remote(config["bc_whitelist"][w.modality], insecure=(not config["bc_https"]))
    output:
        "bc_whitelists/{modality}.txt.gz"
    conda:
        "envs/portal.yaml"
    shell:
        "mv {input} {output}"

idx_urls = {v["bwt2_idx_prefix"]: v["bwt2_idx"] for v in config["genome"].values()}
rule fetch_index:
    """
    Fetch Bowtie2 index
    """
    input:
        lambda w: HTTP.remote(idx_urls[w.bwt2_prefix], insecure=(not config["idx_https"]))
    output:
        i1 = "bwt2_idx/{bwt2_name}/{bwt2_prefix}.1.bt2",
        i2 = "bwt2_idx/{bwt2_name}/{bwt2_prefix}.2.bt2",
        i3 = "bwt2_idx/{bwt2_name}/{bwt2_prefix}.3.bt2",
        i4 = "bwt2_idx/{bwt2_name}/{bwt2_prefix}.4.bt2",
        r1 = "bwt2_idx/{bwt2_name}/{bwt2_prefix}.rev.1.bt2",
        r2 = "bwt2_idx/{bwt2_name}/{bwt2_prefix}.rev.2.bt2",
        out_dir = "bwt2_idx/{bwt2_name}"
    conda:
        "envs/portal.yaml"
    shell:
        "unzip {input} -d {output.out_dir}"

rule idx_prefix_placeholder:
    """
    Create Bowtie2 index prefix dummy file
    """
    output:
        touch("bwt2_idx/{bwt2_name}/{bwt2_prefix,[A-Za-z0-9]+}")
